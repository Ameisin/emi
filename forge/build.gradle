plugins {
	id "dev.architectury.loom"
	id "com.github.johnrengelman.shadow" version "7.1.2"
}
evaluationDependsOn ':xplat'

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	accessWidenerPath = project(":xplat").loom.accessWidenerPath

	mods {
		main {
			sourceSet project(':xplat').sourceSets.main
		}
	}

	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfig "emi.mixins.json"
		mixinConfig "emi-forge.mixins.json"
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

	forge "net.minecraftforge:forge:${rootProject.forge_version}"

	common(project(path: ":xplat", configuration: "namedElements")) { transitive = false }
	shadowCommon(project(path: ":xplat", configuration: "transformProductionForge")) { transitive = false }

	modCompileOnly("mezz.jei:${rootProject.jei_version}") {
		transitive = false
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
}

sourcesJar {
	def commonSources = project(":xplat").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

task filteredSourcesJar(type: Jar) {
	classifier = 'filtered-sources'
	dependsOn remapSourcesJar
	from zipTree(remapSourcesJar.archivePath)
	exclude 'dev/emi/emi/jemi/**'
}

task apiJar(type: Jar) {
	classifier = 'api'
	dependsOn remapJar
	from zipTree(remapJar.archivePath)
	include 'emi.mixins.json'
	include 'emi-forge.mixins.json'
	include 'emi.accesswidener'
	include 'dev/emi/emi/api/**'
	exclude 'dev/emi/emi/api/EmiRecipeHandler**'
	exclude 'dev/emi/emi/api/stack/FluidEmiStack**'
	exclude 'dev/emi/emi/api/stack/ItemEmiStack**'
	exclude 'dev/emi/emi/api/stack/EmptyEmiStack**'
	exclude 'dev/emi/emi/api/stack/TagEmiIngredient**'
	exclude 'dev/emi/emi/api/stack/ListEmiIngredient**'
}

build.dependsOn filteredSourcesJar
build.dependsOn apiJar

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId = "${rootProject.name}-${project.name}"
			version = project.ext.mavenVersion
			artifact(remapJar) {
				builtBy remapJar
				classifier ''
			}
			artifact(filteredSourcesJar) {
				builtBy filteredSourcesJar
				classifier 'sources'
			}
			artifact(apiJar) {
				builtBy apiJar
				classifier 'api'
			}
		}
	}
	setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
	if (project.hasProperty("mavenUrl")) {
		repositories.maven {
			url project.mavenUrl
			credentials {
				username project.mavenUsername
				password project.mavenPassword
			}
		}
	}
}
